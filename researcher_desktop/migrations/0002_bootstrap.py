# Generated by Django 3.2.7 on 2021-09-15 07:04

from django.db import migrations

from django.conf import settings

from researcher_desktop.constants import APP_NAME


class Migration(migrations.Migration):

    def add(apps, schema_editor):
        AvailabilityZone = apps.get_model('researcher_desktop',
                                          'AvailabilityZone')
        Domain = apps.get_model('researcher_desktop', 'Domain')

        if getattr(settings, 'ZONES', None):
            for z in settings.ZONES:
                (zone, _) = AvailabilityZone.objects.get_or_create(
                    name=z['name'], zone_weight=int(z['zone_weight']))
                for d in z.get('domains', []):
                    Domain.objects.create(name=d, zone=zone)

        Feature = apps.get_model('researcher_workspace', 'Feature')
        app_feature = Feature.objects.get(app_name=APP_NAME)
        DesktopType = apps.get_model('researcher_desktop', 'DesktopType')

        # Populate initial desktops from the settings.
        if getattr(settings, 'DESKTOP_TYPES', None):
            field_names = [f.name for f in DesktopType._meta.get_fields()]
            for desktop_type in settings.DESKTOP_TYPES:
                # Make sure we only incorporate fields that have been defined
                # at this point in the migration history.  Other fields may
                # need to be incorporated by later migrations.
                filtered_desktop_type = {
                    key: value for (key, value) in desktop_type.items()
                    if key in field_names}
                zone_list = filtered_desktop_type.pop('restrict_to_zones', [])
                zones = AvailabilityZone.objects.filter(name__in=zone_list)
                dt = DesktopType.objects.create(**filtered_desktop_type,
                                                feature=app_feature)
                dt.restrict_to_zones.set(zones)

    def remove(apps, schema_editor):
        DesktopType = apps.get_model('researcher_desktop', 'DesktopType')
        DesktopType.objects.all().delete()

        AZ = apps.get_model('researcher_desktop', 'AvailabilityZone')
        AZ.objects.all().delete()

    dependencies = [
        ('researcher_desktop', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add, remove)
    ]
